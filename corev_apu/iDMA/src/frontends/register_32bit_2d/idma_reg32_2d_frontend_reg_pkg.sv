// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package idma_reg32_2d_frontend_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_src_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_dst_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_num_bytes_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } decouple;
    struct packed {
      logic        q;
    } deburst;
    struct packed {
      logic        q;
    } serialize;
    struct packed {
      logic        q;
    } twod;
  } idma_reg32_2d_frontend_reg2hw_conf_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_stride_src_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_stride_dst_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } idma_reg32_2d_frontend_reg2hw_num_repetitions_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } idma_reg32_2d_frontend_reg2hw_next_id_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } idma_reg32_2d_frontend_reg2hw_done_reg_t;

  typedef struct packed {
    logic [15:0] d;
  } idma_reg32_2d_frontend_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } idma_reg32_2d_frontend_hw2reg_next_id_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } idma_reg32_2d_frontend_hw2reg_done_reg_t;

  // Register -> HW type
  typedef struct packed {
    idma_reg32_2d_frontend_reg2hw_src_addr_reg_t src_addr; // [261:230]
    idma_reg32_2d_frontend_reg2hw_dst_addr_reg_t dst_addr; // [229:198]
    idma_reg32_2d_frontend_reg2hw_num_bytes_reg_t num_bytes; // [197:166]
    idma_reg32_2d_frontend_reg2hw_conf_reg_t conf; // [165:162]
    idma_reg32_2d_frontend_reg2hw_stride_src_reg_t stride_src; // [161:130]
    idma_reg32_2d_frontend_reg2hw_stride_dst_reg_t stride_dst; // [129:98]
    idma_reg32_2d_frontend_reg2hw_num_repetitions_reg_t num_repetitions; // [97:66]
    idma_reg32_2d_frontend_reg2hw_next_id_reg_t next_id; // [65:33]
    idma_reg32_2d_frontend_reg2hw_done_reg_t done; // [32:0]
  } idma_reg32_2d_frontend_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    idma_reg32_2d_frontend_hw2reg_status_reg_t status; // [79:64]
    idma_reg32_2d_frontend_hw2reg_next_id_reg_t next_id; // [63:32]
    idma_reg32_2d_frontend_hw2reg_done_reg_t done; // [31:0]
  } idma_reg32_2d_frontend_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_SRC_ADDR_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_DST_ADDR_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_NUM_BYTES_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_CONF_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_STRIDE_SRC_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_STRIDE_DST_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_NUM_REPETITIONS_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_STATUS_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_NEXT_ID_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] IDMA_REG32_2D_FRONTEND_DONE_OFFSET = 6'h 24;

  // Reset values for hwext registers and their fields
  parameter logic [15:0] IDMA_REG32_2D_FRONTEND_STATUS_RESVAL = 16'h 0;
  parameter logic [31:0] IDMA_REG32_2D_FRONTEND_NEXT_ID_RESVAL = 32'h 0;
  parameter logic [31:0] IDMA_REG32_2D_FRONTEND_DONE_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    IDMA_REG32_2D_FRONTEND_SRC_ADDR,
    IDMA_REG32_2D_FRONTEND_DST_ADDR,
    IDMA_REG32_2D_FRONTEND_NUM_BYTES,
    IDMA_REG32_2D_FRONTEND_CONF,
    IDMA_REG32_2D_FRONTEND_STRIDE_SRC,
    IDMA_REG32_2D_FRONTEND_STRIDE_DST,
    IDMA_REG32_2D_FRONTEND_NUM_REPETITIONS,
    IDMA_REG32_2D_FRONTEND_STATUS,
    IDMA_REG32_2D_FRONTEND_NEXT_ID,
    IDMA_REG32_2D_FRONTEND_DONE
  } idma_reg32_2d_frontend_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] IDMA_REG32_2D_FRONTEND_PERMIT [10] = '{
    4'b 1111, // index[0] IDMA_REG32_2D_FRONTEND_SRC_ADDR
    4'b 1111, // index[1] IDMA_REG32_2D_FRONTEND_DST_ADDR
    4'b 1111, // index[2] IDMA_REG32_2D_FRONTEND_NUM_BYTES
    4'b 0001, // index[3] IDMA_REG32_2D_FRONTEND_CONF
    4'b 1111, // index[4] IDMA_REG32_2D_FRONTEND_STRIDE_SRC
    4'b 1111, // index[5] IDMA_REG32_2D_FRONTEND_STRIDE_DST
    4'b 1111, // index[6] IDMA_REG32_2D_FRONTEND_NUM_REPETITIONS
    4'b 0011, // index[7] IDMA_REG32_2D_FRONTEND_STATUS
    4'b 1111, // index[8] IDMA_REG32_2D_FRONTEND_NEXT_ID
    4'b 1111  // index[9] IDMA_REG32_2D_FRONTEND_DONE
  };

endpackage

